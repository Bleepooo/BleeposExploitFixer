package dev.bleepo.bleeposexploitfixer;

import com.comphenix.protocol.ProtocolManager;
import dev.bleepo.bleeposexploitfixer.commands.Help;
import dev.bleepo.bleeposexploitfixer.commands.Kill;
import dev.bleepo.bleeposexploitfixer.commands.ReloadCommand;
import dev.bleepo.bleeposexploitfixer.commands.Say;
import dev.bleepo.bleeposexploitfixer.events.OnFirstJoin;
import dev.bleepo.bleeposexploitfixer.events.OnJoin;
import dev.bleepo.bleeposexploitfixer.events.OnLeave;
import dev.bleepo.bleeposexploitfixer.patches.*;
import dev.bleepo.bleeposexploitfixer.utils.TPS;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.*;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.HashMap;
import java.util.UUID;

public final class Main extends JavaPlugin implements Listener {

    private static Main instance;

    public static Main getInstance() {
        return instance;
    }

    private ProtocolManager protocolManager;
    private final HashMap<UUID, Integer> levernotifier = new HashMap<>();
    private final HashMap<UUID, Integer> leverInteract = new HashMap<>();
    private final HashMap<Chunk, Integer> redstonePerChunk = new HashMap<>();

    private BukkitRunnable runnable;
    private BukkitRunnable notifycleaner;

    @Override
    public void onEnable() {

        //Load Config
        getLogger().info(ChatColor.GREEN + "Loading Config...");
        saveDefaultConfig();

        //Clean HashMaps
        getLogger().info(ChatColor.GREEN + "Cleaning Hashmaps...");
        leverInteract.clear();
        levernotifier.clear();
        redstonePerChunk.clear();

        //Clean HashMaps Every Second
        runnable = new BukkitRunnable() {
            @Override
            public void run() {
                leverInteract.clear();
                redstonePerChunk.clear();
            }
        };
        runnable.runTaskTimer(this, 20, 20);

        //Clean LeverNotifier Hashmap
        notifycleaner = new BukkitRunnable() {
            @Override
            public void run() {
                levernotifier.clear();
            }
        };
        notifycleaner.runTaskTimer(this, 600, 600);

        if (instance == null) {
            instance = this;
        }

        //Register Events
        getLogger().info(ChatColor.GREEN + "Registering Events...");
        getServer().getPluginManager().registerEvents(new DispenserCrash(this), this);
        getServer().getPluginManager().registerEvents(new LiquidLag(this), this);
        getServer().getPluginManager().registerEvents(new MinecartCrash(this), this);
        getServer().getPluginManager().registerEvents(new EndCrash(this), this);
        getServer().getPluginManager().registerEvents(new EntityThroughPortal(this), this);
        getServer().getPluginManager().registerEvents(new PurgeWitherSkulls(this), this);
        getServer().getPluginManager().registerEvents(new OnFirstJoin(this), this);
        getServer().getPluginManager().registerEvents(new OnJoin(this), this);
        getServer().getPluginManager().registerEvents(new OnLeave(this), this);
        getServer().getPluginManager().registerEvents(this, this);

        //Register Commands
        this.getLogger().info(ChatColor.GREEN + "Loading Commands...");
        this.getCommand("help").setExecutor(new Help(this));
        this.getCommand("kill").setExecutor(new Kill(this));
        this.getCommand("say").setExecutor(new Say(this));
        this.getCommand("befreload").setExecutor(new ReloadCommand(this));

        //Load ProtocolLib
        if (getServer().getPluginManager().getPlugin("ProtocolLib") != null) {
            getLogger().info(ChatColor.GREEN + "Detected ProtocolLib!");
            ChunkBan.protocolLibWrapper(this);
        } else {
            getLogger().warning("Cannot find ProtocolLib. Please Install ProtocolLib.");
        }
        Bukkit.getServer().getScheduler().scheduleSyncRepeatingTask(this, new TPS(), 100L, 1L);

        //Loaded
        getLogger().info(ChatColor.AQUA + "[BleeposExploitFixer]" + ChatColor.GREEN + " is Loaded and Enabled!");
    }

    @Override
    public void onDisable() {
        instance = null;
        getLogger().info(ChatColor.AQUA + "[BleeposExploitFixer]" + ChatColor.RED + " is Unloaded and Disabled!");
    }

    //Redstone Patches
    @EventHandler
    public void onPistonExtend(BlockPistonExtendEvent e) {
        onPistonEvent(e);
    }

    @EventHandler
    public void onPistonRetract(BlockPistonRetractEvent e) {
        onPistonEvent(e);
    }

    @EventHandler
    public void onRedstoneEvent(BlockRedstoneEvent e) {
        redstonePerChunk.put(e.getBlock().getChunk(), redstonePerChunk.computeIfAbsent(e.getBlock().getChunk(), a -> 0) +1);
        if (redstonePerChunk.get(e.getBlock().getChunk()) > 150) {
            e.setNewCurrent(0);
        }
    }

    @EventHandler
    public void onDispenseEvent(BlockDispenseEvent e) {
        redstonePerChunk.put(e.getBlock().getChunk(), redstonePerChunk.computeIfAbsent(e.getBlock().getChunk(), a -> 0) +1);
        if (redstonePerChunk.get(e.getBlock().getChunk()) > 150) {
            e.setCancelled(true);
        }
    }

    public void onPistonEvent(final BlockPistonEvent e) {
        redstonePerChunk.put(e.getBlock().getChunk(), redstonePerChunk.computeIfAbsent(e.getBlock().getChunk(), a -> 0) +1);
        if (redstonePerChunk.get(e.getBlock().getChunk()) > 150) {
            e.setCancelled(true);
        }
    }

    //Lever & Item Dupe Frame Patch
    @EventHandler
    public void onPlayerInteract(final PlayerInteractEvent e) {
        if(this.getConfig().getBoolean("leverspam.enabled")) {
            leverInteract.put(e.getPlayer().getUniqueId(), leverInteract.computeIfAbsent(e.getPlayer().getUniqueId(), a -> 0) +1);
            levernotifier.put(e.getPlayer().getUniqueId(), levernotifier.computeIfAbsent(e.getPlayer().getUniqueId(), a -> 0) +1);
            if (e.getAction().equals(Action.RIGHT_CLICK_BLOCK) && e.getClickedBlock().getType() == Material.LEVER) {
                if (leverInteract.get(e.getPlayer().getUniqueId()) > this.getConfig().getInt("leverspam.interval")) {
                    for(Player player : Bukkit.getOnlinePlayers())
                        if(player.isOp()) {
                            if(levernotifier.get(e.getPlayer().getUniqueId()) >= this.getConfig().getInt("leverspam.interval") && levernotifier.get(e.getPlayer().getUniqueId()) < this.getConfig().getInt("leverspam.interval") + 2) {
                                player.sendMessage(ChatColor.GOLD + "[" + ChatColor.AQUA + "BleeposExploitFixer" + ChatColor.GOLD + "] " + ChatColor.DARK_RED + e.getPlayer().getDisplayName() + ChatColor.GOLD + " is spamming levers!");
                            }
                        }
                    String msg = this.getConfig().getString("message");
                    if(this.getConfig().getBoolean("leverspam.leverspamkick")) {
                        e.getPlayer().kickPlayer(ChatColor.translateAlternateColorCodes('&', msg));
                    }
                    e.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&', msg));
                    e.setCancelled(true);
                }
            }
        }
    }
}
